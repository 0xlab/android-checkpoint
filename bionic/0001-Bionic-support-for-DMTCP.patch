From 6e870d1b5c9e2a594f5d89eec2d971519bd7487c Mon Sep 17 00:00:00 2001
From: Kito Cheng <kito@0xlab.org>
Date: Mon, 30 Jul 2012 00:11:26 +0800
Subject: [PATCH 1/3] Bionic support for DMTCP

Change-Id: I427c324c09265dd2f369ad3fbb85de7cbcc7843c
---
 libc/bionic/pthread.c |   25 +++++++++++++++++++++++++
 1 files changed, 25 insertions(+), 0 deletions(-)

diff --git a/libc/bionic/pthread.c b/libc/bionic/pthread.c
index 3435d21..97c7ddf 100644
--- a/libc/bionic/pthread.c
+++ b/libc/bionic/pthread.c
@@ -50,8 +50,15 @@
 #include <fcntl.h>
 #include <stdio.h>
 #include <bionic_pthread.h>
+#ifndef LIBC_STATIC
+#include <dlfcn.h>
+#endif
 
 extern int  __pthread_clone(int (*fn)(void*), void *child_stack, int flags, void *arg);
+#ifndef LIBC_STATIC
+static int  (*__hijack__pthread_clone)(int (*fn)(void*), void *child_stack, int flags, void *arg) = NULL;
+static void *hijack_handle = NULL;
+#endif
 extern void _exit_with_stack_teardown(void * stackBase, int stackSize, int retCode);
 extern void _exit_thread(int  retCode);
 extern int  __set_errno(int);
@@ -307,6 +314,12 @@ int pthread_create(pthread_t *thread_out, pthread_attr_t const * attr,
     int                  madestack = 0;
     int     old_errno = errno;
 
+#ifndef LIBC_STATIC
+    if (getenv("DMTCP_HIJACK_LIBS") &&
+        !hijack_handle) {
+        hijack_handle =dlopen("dmtcphijack.so", 0);
+    }
+#endif
     /* this will inform the rest of the C library that at least one thread
      * was created. this will enforce certain functions to acquire/release
      * locks (e.g. atexit()) to protect shared global structures.
@@ -354,10 +367,22 @@ int pthread_create(pthread_t *thread_out, pthread_attr_t const * attr,
 
     tls[TLS_SLOT_THREAD_ID] = thread;
 
+#ifdef LIBC_STATIC
     tid = __pthread_clone((int(*)(void*))start_routine, tls,
                 CLONE_FILES | CLONE_FS | CLONE_VM | CLONE_SIGHAND
                 | CLONE_THREAD | CLONE_SYSVSEM | CLONE_DETACHED,
                 arg);
+#else
+    int flags = CLONE_FILES | CLONE_FS | CLONE_VM | CLONE_SIGHAND |
+                CLONE_THREAD | CLONE_SYSVSEM | CLONE_DETACHED;
+    if (!__hijack__pthread_clone && hijack_handle)
+        __hijack__pthread_clone = dlsym(hijack_handle, "__pthread_clone");
+    if (__hijack__pthread_clone) {
+        tid = __hijack__pthread_clone((int(*)(void*))start_routine, tls, flags, arg);
+    } else {
+        tid = __pthread_clone((int(*)(void*))start_routine, tls, flags, arg);
+    }
+#endif
 
     if(tid < 0) {
         int  result;
-- 
1.7.7.6


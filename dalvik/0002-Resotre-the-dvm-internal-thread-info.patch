From dc35a3e186d608b36c1f0360ee3324c6bc61429f Mon Sep 17 00:00:00 2001
From: Kito Cheng <kito@0xlab.org>
Date: Mon, 5 Nov 2012 12:47:34 +0800
Subject: [PATCH 2/2] Resotre the dvm internal thread info

Change-Id: I234c2ab1e38611f4fb27226307a90ee17bb065a1
---
 vm/Dvm.mk            |    1 +
 vm/Init.cpp          |   14 +++++++++++++-
 vm/ReconfigureDvm.mk |    2 +-
 vm/Thread.cpp        |    9 +++++++++
 vm/Thread.h          |    2 ++
 5 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/vm/Dvm.mk b/vm/Dvm.mk
index 4aa054d..93b1de6 100644
--- a/vm/Dvm.mk
+++ b/vm/Dvm.mk
@@ -226,6 +226,7 @@ LOCAL_C_INCLUDES += \
 	dalvik/vm \
 	external/zlib \
 	libcore/include \
+	external/dmtcp/dmtcp/src \
 
 MTERP_ARCH_KNOWN := false
 
diff --git a/vm/Init.cpp b/vm/Init.cpp
index e0dd597..6adbb12 100644
--- a/vm/Init.cpp
+++ b/vm/Init.cpp
@@ -31,6 +31,10 @@
 #include "mterp/Mterp.h"
 #include "Hash.h"
 
+#include <dmtcpaware.h>
+
+#define ENABLE_CHECKPOINT
+
 #define kMinHeapStartSize   (1*1024*1024)
 #define kMinHeapSize        (2*1024*1024)
 #define kMaxHeapSize        (1*1024*1024*1024)
@@ -42,7 +46,9 @@ extern int jniRegisterSystemMethods(JNIEnv* env);
 
 /* fwd */
 static bool registerSystemNatives(JNIEnv* pEnv);
+#ifndef ENABLE_CHECKPOINT
 static bool initJdwp();
+#endif
 static bool initZygote();
 
 
@@ -1183,7 +1189,9 @@ std::string dvmStartup(int argc, const char* const argv[],
         bool ignoreUnrecognized, JNIEnv* pEnv)
 {
     ScopedShutdown scopedShutdown;
-
+#ifdef HAVE_ANDROID_OS
+    dmtcpInstallPerThreadHooks(NULL, resetThreadAtResume);
+#endif
     assert(gDvm.initializing);
 
     LOGV("VM init args (%d):", argc);
@@ -1486,9 +1494,11 @@ bool dvmInitAfterZygote()
      * "suspend=y", this will pause the VM.  We probably want this to
      * come last.
      */
+#ifndef ENABLE_CHECKPOINT
     if (!initJdwp()) {
         LOGD("JDWP init failed; continuing anyway");
     }
+#endif
 
 #ifndef LOG_NDEBUG
     endJdwp = dvmGetRelativeTimeUsec();
@@ -1527,6 +1537,7 @@ bool dvmInitAfterZygote()
  *
  * This gets more complicated with a nonzero value for "timeout".
  */
+#ifndef ENABLE_CHECKPOINT
 static bool initJdwp()
 {
     assert(!gDvm.zygote);
@@ -1575,6 +1586,7 @@ static bool initJdwp()
 
     return true;
 }
+#endif
 
 /*
  * An alternative to JNI_CreateJavaVM/dvmStartup that does the first bit
diff --git a/vm/ReconfigureDvm.mk b/vm/ReconfigureDvm.mk
index 20e5626..fcbe094 100644
--- a/vm/ReconfigureDvm.mk
+++ b/vm/ReconfigureDvm.mk
@@ -26,7 +26,7 @@ endif
 
 include $(LOCAL_PATH)/Dvm.mk
 
-LOCAL_SHARED_LIBRARIES += liblog libcutils libnativehelper libz libdl
+LOCAL_SHARED_LIBRARIES += liblog libcutils libnativehelper libz libdl libdmtcpaware
 
 LOCAL_STATIC_LIBRARIES += libdex
 
diff --git a/vm/Thread.cpp b/vm/Thread.cpp
index 5f0b515..1bab9b1 100644
--- a/vm/Thread.cpp
+++ b/vm/Thread.cpp
@@ -3462,3 +3462,12 @@ void dvmNukeThread(Thread* thread)
     signal(SIGSEGV, SIG_IGN);
     LOGD("Continuing");
 }
+
+void resetThreadAtResume( int is_ckpt,int is_restart ) {
+    Thread *thread = dvmThreadSelf();
+    if (thread) {
+       LOGE("DVM Restore Thread Info tid=%d (past tid=%d)",
+            dvmGetSysThreadId(), thread->systemTid);
+       thread->systemTid = dvmGetSysThreadId();
+    }
+}
diff --git a/vm/Thread.h b/vm/Thread.h
index 7f14ce5..b824d1d 100644
--- a/vm/Thread.h
+++ b/vm/Thread.h
@@ -599,4 +599,6 @@ void dvmDumpAllThreadsEx(const DebugOutputTarget* target, bool grabLock);
  */
 void dvmNukeThread(Thread* thread);
 
+void resetThreadAtResume( int is_ckpt,int is_restart ) ;
+
 #endif  // DALVIK_THREAD_H_
-- 
1.7.7.6

